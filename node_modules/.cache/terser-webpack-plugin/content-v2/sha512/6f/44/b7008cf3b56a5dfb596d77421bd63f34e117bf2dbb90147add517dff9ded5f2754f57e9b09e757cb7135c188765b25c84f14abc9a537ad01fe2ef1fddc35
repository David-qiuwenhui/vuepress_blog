{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{447:function(t,a,e){\"use strict\";e.r(a);var _=e(2),v=Object(_.a)({},(function(){var t=this,a=t._self._c;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"git-版本控制\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git-版本控制\"}},[t._v(\"#\")]),t._v(\" Git 版本控制\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"零、配置公私钥\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#零、配置公私钥\"}},[t._v(\"#\")]),t._v(\" 零、配置公私钥\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v('ssh-keygen -t rsa -C \"1059713136@qq.com\"')]),t._v(\"\\n三次回车确定默认选项\\n公钥\"),a(\"code\",[t._v(\"id_rsa.pub\")]),t._v(\"和私钥\"),a(\"code\",[t._v(\"id_ras\")]),t._v(\"存放地址\"),a(\"code\",[t._v(\"cd ~/.ssh\")]),t._v(\"\\n查看公钥内容\"),a(\"code\",[t._v(\"cat id_rsa.pub\")]),t._v(\" \"),a(\"strong\",[a(\"u\",[t._v(\"建立git远程连接时 用户名的密码是personal token\")])])]),t._v(\" \"),a(\"p\",[t._v(\"将公钥复制到github setting后，本地测试是否配置成功\\n\"),a(\"code\",[t._v(\"ssh -T git@github.com\")])]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"https://www.runoob.com/git/git-remote-repo.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"菜鸟教程-Git Github\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"h2\",{attrs:{id:\"一、git-工具初始配置\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、git-工具初始配置\"}},[t._v(\"#\")]),t._v(\" 一、git 工具初始配置\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git config --global --list\")]),t._v(\" 查看全局的配置信息\\n\"),a(\"code\",[t._v('git config --global user.name \"David-qiuwenhui\"')]),t._v(\" \"),a(\"code\",[t._v('git config --global user.email \"1059713136@qq.com\"')])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"二、从github创建新仓库-关联本地和远程仓库的引导\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、从github创建新仓库-关联本地和远程仓库的引导\"}},[t._v(\"#\")]),t._v(\" 二、从github创建新仓库，关联本地和远程仓库的引导\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# create a new repository on the command line\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"echo\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"# git_repo\"')]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">>\")]),t._v(\" README.md\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" init\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"add\")]),t._v(\" README.md\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" commit \"),a(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-m\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"first commit\"')]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" branch \"),a(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-M\")]),t._v(\" main\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" remote \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"add\")]),t._v(\" origin https://github.com/David-qiuwenhui/git_repo.git\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" push \"),a(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-u\")]),t._v(\" origin main\\n\")])])]),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# push an existing repository from the command line\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" remote \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"add\")]),t._v(\" origin https://github.com/David-qiuwenhui/git_repo.git\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" branch \"),a(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-M\")]),t._v(\" main\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"git\")]),t._v(\" push \"),a(\"span\",{pre:!0,attrs:{class:\"token parameter variable\"}},[t._v(\"-u\")]),t._v(\" origin main\\n\")])])]),a(\"blockquote\",[a(\"p\",[t._v(\"注意📢：clone远程仓库指定分支到本地\\n\"),a(\"code\",[t._v(\"git clone -b [branch_name] [repo_url]\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"查看git远程连接信息\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#查看git远程连接信息\"}},[t._v(\"#\")]),t._v(\" 查看git远程连接信息\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-查看git的远程仓库地址\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-查看git的远程仓库地址\"}},[t._v(\"#\")]),t._v(\" （1）查看git的远程仓库地址\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git remote\")]),t._v(\" \"),a(\"code\",[t._v(\"git remote -v\")]),t._v(\" \"),a(\"code\",[t._v(\"git remote show origin\")]),t._v(\" 查看仓库更详细的信息\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-添加删除远程连接\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-添加删除远程连接\"}},[t._v(\"#\")]),t._v(\" （2）添加删除远程连接\")]),t._v(\" \"),a(\"p\",[t._v(\"添加远程仓库地址\"),a(\"code\",[t._v(\"add\")]),t._v(\" \"),a(\"code\",[t._v(\"git remote add <remote_name> <remote_url>\")]),t._v(\"\\n删除远程仓库地址\"),a(\"code\",[t._v(\"remove\")]),t._v(\" \"),a(\"code\",[t._v(\"git remote remove xxx\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"三、git-本地仓库初始化配置\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、git-本地仓库初始化配置\"}},[t._v(\"#\")]),t._v(\" 三、git 本地仓库初始化配置\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-初始化\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-初始化\"}},[t._v(\"#\")]),t._v(\" （1）初始化\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git init\")]),t._v(\" 初始化本地仓库git\\n\"),a(\"code\",[t._v(\"git status\")]),t._v(\" 查看git状态\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-配置远程仓库\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-配置远程仓库\"}},[t._v(\"#\")]),t._v(\" （2）配置远程仓库\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git remote add origin https://gitee.com/qiu-wenhui/javascript-algorithm\")]),t._v(\" 添加远程仓库\\n\"),a(\"code\",[t._v(\"git remote\")]),t._v(\" 查看远程的仓库名\\n\"),a(\"code\",[t._v(\"git remote -v\")]),t._v(\" 查看远程仓库地址\\n\"),a(\"code\",[t._v(\"git remote rm origin\")]),t._v(\" 删除远程仓库\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git add .\")]),t._v(\" 添加到暂存区\\n\"),a(\"code\",[t._v('git commit -m \"some comment\"')]),t._v(\"添加到本地仓库\\n\"),a(\"code\",[t._v(\"git commit\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"注意📢：使用\"),a(\"code\",[t._v(\"git-cz\")]),t._v(\"进行commit更加规范\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3-变更推送\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-变更推送\"}},[t._v(\"#\")]),t._v(\" （3）变更推送\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git push -u origin main\")]),t._v(\" 推送到远程仓库（并设置本地和远程仓库推送关联）\\n\"),a(\"code\",[t._v(\"git push --set-upstream origin dev\")]),t._v(\"  设置branch的远程推送的分支为dev分支\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"简写形式：\"),a(\"code\",[t._v(\"git push -u origin dev\")])])]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git push origin HEAD\")]),t._v(\"推送至远程同名分支\\n\"),a(\"code\",[t._v(\"git push origin HEAD:master\")]),t._v(\"推动到远程的上游分支\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"注意📢：如果遇到\"),a(\"code\",[t._v(\"git push\")]),t._v(\"超时，需要将\"),a(\"code\",[t._v(\"https\")]),t._v(\"通道换成\"),a(\"code\",[t._v(\"ssh\")]),t._v(\"通道\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_4-上次提交的commit信息查看\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-上次提交的commit信息查看\"}},[t._v(\"#\")]),t._v(\" （4）上次提交的\"),a(\"code\",[t._v(\"commit\")]),t._v(\"信息查看\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git show\")]),t._v(\"查看上次提交的commit信息\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"包含上次提交的commit id、作者信息（邮箱和姓名）、提交日期、commit message、代码diff等\")])]),t._v(\" \"),a(\"p\",[t._v(\"![image-20220423113140707](/Users/qiuwenhui/Library/Application Support/typora-user-images/image-20220423113140707.png)\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"四、查看和修改git的branch\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四、查看和修改git的branch\"}},[t._v(\"#\")]),t._v(\" 四、查看和修改git的branch\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-查看分支\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-查看分支\"}},[t._v(\"#\")]),t._v(\" （1）查看分支\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git branch -a\")]),t._v(\" 查看所有分支\\n\"),a(\"code\",[t._v(\"git branch -r\")]),t._v(\" 查看远程分支\\n\"),a(\"code\",[t._v(\"git branch -vv\")]),t._v(\" 查看本地分支及追踪的分支\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-新建分支\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-新建分支\"}},[t._v(\"#\")]),t._v(\" （2）新建分支\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git branch [branch name]\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3-新建分支并切换至新建的分支\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-新建分支并切换至新建的分支\"}},[t._v(\"#\")]),t._v(\" （3）新建分支并切换至新建的分支\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git checkout -b [branch]\")]),t._v(\" \"),a(\"code\",[t._v(\"git checkout [branch] 切换分支\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_4-合并指定分支到当前分支\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-合并指定分支到当前分支\"}},[t._v(\"#\")]),t._v(\" （4）合并指定分支到当前分支\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git merge [branch]\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_5-重命名和删除分支\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-重命名和删除分支\"}},[t._v(\"#\")]),t._v(\" （5）重命名和删除分支\")]),t._v(\" \"),a(\"p\",[t._v(\"重命名本地分支\\n\"),a(\"code\",[t._v(\"git branch -m [old_name] [new_name]\")]),t._v(\"\\n删除\"),a(\"strong\",[t._v(\"本地\")]),t._v(\"分支\\n\"),a(\"code\",[t._v(\"git branch --delete [branch]\")]),t._v(\"\\n删除\"),a(\"strong\",[t._v(\"远程\")]),t._v(\"分支\\n\"),a(\"code\",[t._v(\"git push origin --delete [branch]\")]),t._v(\"\\n将本地仓库push到github仓库main分支\\n\"),a(\"code\",[t._v(\"git push -u origin main\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"检查未合并的分支：\"),a(\"code\",[t._v(\"git branch --no-merged\")]),t._v(\"\\n检查已合并的分支：\"),a(\"code\",[t._v(\"git branch --merged\")]),t._v(\"\\n根据历史记录恢复删除的分支：\"),a(\"code\",[t._v(\"git checkout -b [branch_name] [commit_hash]\")])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"五、拉取远程仓库至本地-更新与合并\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#五、拉取远程仓库至本地-更新与合并\"}},[t._v(\"#\")]),t._v(\" 五、拉取远程仓库至本地（更新与合并）\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-方式一-fetch-merge\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-方式一-fetch-merge\"}},[t._v(\"#\")]),t._v(\" （1）方式一：\"),a(\"code\",[t._v(\"fetch, merge\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"从远程仓库下载新分支与数据\\n\"),a(\"code\",[t._v(\"git fetch origin\")])]),t._v(\" \"),a(\"li\",[t._v(\"从远端仓库提取数据并尝试合并到当前分支\\n\"),a(\"code\",[t._v(\"git merge origin/main\")])])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"https://www.runoob.com/wp-content/uploads/2015/03/main-qimg-00a6b5a8ec82400657444504c4d4d1a7.png\",alt:\"img\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-方式二-pull\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-方式二-pull\"}},[t._v(\"#\")]),t._v(\" （2）方式二：\"),a(\"code\",[t._v(\"pull\")])]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git pull\")]),t._v(\" 更新我们的本地仓库至最新改动\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"即等效 \"),a(\"code\",[t._v(\"git fetch + git merge\")])])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"注意📢：完整语法 \"),a(\"code\",[t._v(\"git pull <远程主机名> <远程分支名>:<本地分支名>\")]),t._v(\"\\n示例：\"),a(\"code\",[t._v(\"git pull origin master:main\")]),t._v(\"\\n不输入本地名，则拉取合并远程分支至本地同名分支\")])]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git merge [branch]\")]),t._v(\" 合并其他分支到我们的当前分支\\n两种情况下，git 都会尝试去自动合并改动。但是，如果存在代码冲突，就需要我们手动合并这些 冲突（conflicts）。改完之后，我们需要执行如下命令以将它们标记为合并成功：\\n\"),a(\"code\",[t._v(\"git add <filename>\")]),t._v(\"\\n在合并改动之前，也可以使用如下命令查看：\\n\"),a(\"code\",[t._v(\"git diff <source_branch> <targe_branch>\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"六、git-查询历史记录和版本回退\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#六、git-查询历史记录和版本回退\"}},[t._v(\"#\")]),t._v(\" 六、Git 查询历史记录和版本回退\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"查询历史记录\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#查询历史记录\"}},[t._v(\"#\")]),t._v(\" 查询历史记录\")]),t._v(\" \"),a(\"p\",[t._v(\"（1）查看状态（\"),a(\"code\",[t._v(\"work dir\")]),t._v(\"区和\"),a(\"code\",[t._v(\"stage\")]),t._v(\"区）\\n\"),a(\"code\",[t._v(\"git status\")]),t._v(\"\\n（2）查看日志（\"),a(\"code\",[t._v(\"history\")]),t._v(\"区）\\n\"),a(\"code\",[t._v(\"git log\")]),t._v(\", \"),a(\"code\",[t._v(\"git log --oneline\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"美化日志\"),a(\"code\",[t._v(\"git log --graph --oneline --decorate\")]),t._v(\"\\n（3）查看操作日志\\n\"),a(\"code\",[t._v(\"git reflog\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"版本回退\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#版本回退\"}},[t._v(\"#\")]),t._v(\" 版本回退\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_1-需求一\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-需求一\"}},[t._v(\"#\")]),t._v(\" （1）需求一：\")]),t._v(\" \"),a(\"p\",[t._v(\"【描述】：如果修改的内容已经\"),a(\"code\",[t._v(\"add\")]),t._v(\"到\"),a(\"code\",[t._v(\"stage\")]),t._v(\"区，使用\"),a(\"code\",[t._v(\"checkout\")]),t._v(\"将暂存区中记录的文件覆盖工作目录的文件\\n恢复单个文件\\n\"),a(\"code\",[t._v(\"git checkout [file_name]\")]),t._v(\"\\n恢复暂存区中记录的所有文件\\n\"),a(\"code\",[t._v(\"git checkout .\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"注意📢：\"),a(\"code\",[t._v(\"checkout\")]),t._v(\"仅能从暂存区中恢复已经记录的文件，若本地有新增文件的情况，则不会进行删除操作\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-需求二\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-需求二\"}},[t._v(\"#\")]),t._v(\" （2）需求二\")]),t._v(\" \"),a(\"p\",[t._v(\"【描述】：将 \"),a(\"code\",[t._v(\"stage\")]),t._v(\" 区的文件还原出来\\n还原单个文件\\n\"),a(\"code\",[t._v(\"git reset [file_name]\")]),t._v(\"\\n还原暂存区中记录的所有文件\\n\"),a(\"code\",[t._v(\"git reset .\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"实际上 reset 命令的完整写法如下：\\n\"),a(\"code\",[t._v(\"git reset --mixed HEAD a.txt\")]),t._v(\"\\n其中，mixed 是一个模式（mode）参数，如果 reset 省略这个选项的话默认是 mixed 模式；HEAD 指定了一个历史提交的 hash 值；a.txt 指定了一个或者多个文件。\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"该命令的自然语言描述是：不改变 \"),a(\"code\",[t._v(\"work dir\")]),t._v(\" 中的任何数据，将 \"),a(\"code\",[t._v(\"stage\")]),t._v(\" 区域中的 a.txt 文件还原成 HEAD 指向的 commit history 中的样子。就相当于把对 a.txt 的修改从 \"),a(\"code\",[t._v(\"stage\")]),t._v(\" 区撤销，但依然保存在 \"),a(\"code\",[t._v(\"work dir\")]),t._v(\" 中，变为 unstage 的状态。\")])]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_3-需求三\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-需求三\"}},[t._v(\"#\")]),t._v(\" （3）需求三\")]),t._v(\" \"),a(\"p\",[t._v(\"【描述】：将\"),a(\"code\",[t._v(\"history\")]),t._v(\"中的文件还原至\"),a(\"code\",[t._v(\"work dir\")]),t._v(\"区\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[a(\"p\",[t._v(\"恢复至\"),a(\"code\",[t._v(\"HEAD\")]),t._v(\"指针指向的hash记录\\n\"),a(\"code\",[t._v(\"git checkout HEAD .\")]),t._v(\" \"),a(\"code\",[t._v(\"work dir\")]),t._v(\" 和 \"),a(\"code\",[t._v(\"stage\")]),t._v(\" 中所有的「修改」都会被撤销，恢复成 HEAD 指向的那个 history commit。注意，\"),a(\"code\",[t._v(\"work dir\")]),t._v(\"区中的新增的文件不会被撤销。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"定向恢复至hash记录\\n找到目标 commit 的 HASH 值\\n\"),a(\"code\",[t._v(\"git checkout 2bdf04a [file_name]\")])])])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"七、git-stash临时存储修改的内容\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#七、git-stash临时存储修改的内容\"}},[t._v(\"#\")]),t._v(\" 七、\"),a(\"code\",[t._v(\"git stash\")]),t._v(\"临时存储修改的内容\")]),t._v(\" \"),a(\"p\",[t._v(\"（1）临时存储记录-堆栈和出栈\\n\"),a(\"code\",[t._v(\"git stash\")]),t._v(\" \"),a(\"code\",[t._v(\"git stash pop\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"为临时存储的记录添加注释：\"),a(\"code\",[t._v('git stash push -m \"<stash_message>\"')])])]),t._v(\" \"),a(\"p\",[t._v(\"（2）查看临时存储的记录\\n\"),a(\"code\",[t._v(\"git stash list\")])]),t._v(\" \"),a(\"p\",[t._v(\"（3）恢复存储的工作（不删除列表记录）\\n\"),a(\"code\",[t._v(\"git stash apply\")])]),t._v(\" \"),a(\"p\",[t._v(\"（4）删除存储的内容\\n定向删除单条存储记录\\n\"),a(\"code\",[t._v(\"git stash drop [stash_name]\")]),t._v(\"\\n清空所有的存储记录\\n\"),a(\"code\",[t._v(\"git stash clear\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"八、-gitignore文件规范\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#八、-gitignore文件规范\"}},[t._v(\"#\")]),t._v(\" 八、\"),a(\"code\",[t._v(\".gitignore\")]),t._v(\"文件规范\")]),t._v(\" \"),a(\"p\",[t._v(\".gitignore 文件允许我们定义那些不应该被 Git 跟踪的文件或目录\\n（1）支持通配符：可以使用 * 和 ? 等通配符\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 忽略所有 .log 文件\")]),t._v(\"\\n*.log\\n\")])])]),a(\"p\",[t._v(\"（2）忽略目录：可以忽略整个目录\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 忽略 node_modules 目录\")]),t._v(\"\\nnode_modules/\\n\")])])]),a(\"p\",[t._v(\"（3）白名单：如果你想忽略某个目录，但想保留其中的某些文件，可以使用\"),a(\"code\",[t._v(\"!\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"# 忽略所有 .config 文件，但保留 main.config\")]),t._v(\"\\n*.config\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"!\")]),t._v(\"main.config\\n\")])])]),a(\"h2\",{attrs:{id:\"九、发布新版本时创建新标签-🚩\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#九、发布新版本时创建新标签-🚩\"}},[t._v(\"#\")]),t._v(\" 九、发布新版本时创建新标签 🚩\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-创建标签-🚩\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-创建标签-🚩\"}},[t._v(\"#\")]),t._v(\" （1）创建标签 🚩\")]),t._v(\" \"),a(\"p\",[t._v(\"在本地创建新标签（轻量标签）\\n\"),a(\"code\",[t._v(\"git tag <tag_name>\")]),t._v(\"\\n创建附注标签\\n\"),a(\"code\",[t._v('git tag -a <tag_name> -m \"<message>\"')])]),t._v(\" \"),a(\"p\",[t._v(\"命名格式：\\n\"),a(\"code\",[t._v(\"v<major>.<minor>.<patch>\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"major（主版本号）：重大变化\")]),t._v(\" \"),a(\"li\",[t._v(\"minor（次要版本号）：版本与先前版本兼容\")]),t._v(\" \"),a(\"li\",[t._v(\"patch（补丁号）：bug修复\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"轻量标签：只是某个 commit 的引用，可以理解为是一个commit的别名；\\n附注标签：存储在Git仓库中的一个完整对象，包含打标签者的名字、电子邮件地址、日期时间以及其他的标签信息。它是可以被校验的，可以使用 GNU Privacy Guard (GPG) 签名并验证\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"推送标签\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#推送标签\"}},[t._v(\"#\")]),t._v(\" 推送标签\")]),t._v(\" \"),a(\"p\",[t._v(\"使用以下命令将标签推送到远程仓库：\\n推送本地所有的tag：\\n\"),a(\"code\",[t._v(\"git push origin --tags\")]),t._v(\"\\n推送指定的tag：\\n\"),a(\"code\",[t._v(\"git push origin <tagname>\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-查看标签-🚩\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-查看标签-🚩\"}},[t._v(\"#\")]),t._v(\" （2）查看标签 🚩\")]),t._v(\" \"),a(\"p\",[t._v(\"获取所有标签\\n\"),a(\"code\",[t._v(\"git tag\")]),t._v(\"\\n查看某一个标签的详细信息\\n\"),a(\"code\",[t._v(\"git show <tagname>\")]),t._v(\"\\n切换代码至标签分支\\n`git checkout \"),a(\"tagname\",[t._v(\"``\")])],1),t._v(\" \"),a(\"h3\",{attrs:{id:\"_3-删除标签-🚩\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-删除标签-🚩\"}},[t._v(\"#\")]),t._v(\" （3）删除标签 🚩\")]),t._v(\" \"),a(\"p\",[t._v(\"删除本地仓库指定标签：\\n\"),a(\"code\",[t._v(\"git tag -d <tagname>\")]),t._v(\"\\n删除远程仓库指定标签：\\n\"),a(\"code\",[t._v(\"git push origin --delete <tagname>\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_4-将远程仓库的标签拉取到本地进行开发-🚩\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-将远程仓库的标签拉取到本地进行开发-🚩\"}},[t._v(\"#\")]),t._v(\" （4）将远程仓库的标签拉取到本地进行开发 🚩\")]),t._v(\" \"),a(\"p\",[a(\"code\",[t._v(\"git checkout -b <branch> <tagname>\")])]),t._v(\" \"),a(\"h2\",{attrs:{id:\"九、git-进阶\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#九、git-进阶\"}},[t._v(\"#\")]),t._v(\" 九、git 进阶\")]),t._v(\" \"),a(\"p\",[t._v(\"（1）利用 \"),a(\"code\",[t._v(\"Git Hooks\")]),t._v(\" 优化工作流程\\nGit Hooks 是 Git 仓库中的一些脚本，可以在各种 Git 操作（如提交、推送、接收更改等）的特定点自动触发。我们可以用它们来自动化或优化某些重复的任务。\")]),t._v(\" \"),a(\"p\",[t._v(\"（2）参考技术帖\\nhttps://juejin.cn/post/7111132724185792542#\")])])}),[],!1,null,null,null);a.default=v.exports}}]);","extractedComments":[]}